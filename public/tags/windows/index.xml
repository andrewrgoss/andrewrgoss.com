<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Data Engineer, Consultant, BI Developer in MarTech</title>
    <link>http://andrewrgoss.com/tags/windows/</link>
    <description>Recent content in Windows on Data Engineer, Consultant, BI Developer in MarTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>andrewrgoss@gmail.com (Andrew Goss)</managingEditor>
    <webMaster>andrewrgoss@gmail.com (Andrew Goss)</webMaster>
    <lastBuildDate>Mon, 22 Aug 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andrewrgoss.com/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SSH Keys With PuTTY and Cygwin for Windows</title>
      <link>http://andrewrgoss.com/2016/ssh-keys-with-putty-and-cygwin-for-windows/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate>
      <author>andrewrgoss@gmail.com (Andrew Goss)</author>
      <guid>http://andrewrgoss.com/2016/ssh-keys-with-putty-and-cygwin-for-windows/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/putty.jpg&#34; alt=&#34;PuTTY: a free SSH and Telnet client&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34; /&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In my work at &lt;a href=&#34;http://www.digitaslbi.com/us&#34; target=&#34;_blank&#34;&gt;DigitasLBi&lt;/a&gt;, I need to login to a number of client-specific Linux machines via a terminal emulator (there is no UI for these remote environments) from my local Windows laptop. For this my team uses &lt;a href=&#34;https://www.cygwin.com&#34; target=&#34;_blank&#34;&gt;Cygwin&lt;/a&gt;, a Linux-like environment for Windows making it possible to port software running on POSIX systems (such as Linux, BSD, and Unix systems) to Windows. It&amp;rsquo;s possible to login of course just using a standard username/password combination with &lt;a href=&#34;https://mosh.org&#34; target=&#34;_blank&#34;&gt;Mosh&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34; target=&#34;_blank&#34;&gt;SSH&lt;/a&gt; at the command line. However, the more secure (and easier to manage) approach is to utilize SSH keys to login into a virtual private server.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;ll delve into how I&amp;rsquo;ve set up my computer to use public/private SSH key pairings for accessing different environments. I previously &lt;a href=&#34;http://andrewrgoss.com/2016/ssh-with-git-bash-and-tortoisegit-for-windows&#34;&gt;posted&lt;/a&gt; about using SSH keys with Git Bash and TortoiseGit for Windows. While it&amp;rsquo;s possible to use the same SSH key pairings that were used for that, I prefer the more secure approach of generating specific pairings for &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;Github&amp;nbsp;&lt;img src=&#34;http://andrewrgoss.com/img/github.png&#34;&gt;&lt;/a&gt;&amp;nbsp;,&amp;nbsp;&lt;a href=&#34;https://about.gitlab.com&#34; target=&#34;_blank&#34;&gt;Gitlab&amp;nbsp;&lt;img src=&#34;http://andrewrgoss.com/img/gitlab.png&#34;&gt;&lt;/a&gt;, and any client-specific instances.&lt;/p&gt;

&lt;h2 id=&#34;step-1:f77569a6b4afc10750083404d55c7c58&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Download the following PuTTY files from this site: &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PuTTY (the SSH and Telnet client itself)&lt;/li&gt;
&lt;li&gt;Pageant (an SSH authentication agent for PuTTY, PSCP, PSFTP, and Plink)&lt;/li&gt;
&lt;li&gt;PuTTYgen (an RSA and DSA key generation utility)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-2:f77569a6b4afc10750083404d55c7c58&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Using the downloaded PuTTYgen executable, &lt;a href=&#34;https://winscp.net/eng/docs/ui_puttygen#generating_a_new_key&#34; target=&#34;_blank&#34;&gt;generate a new key&lt;/a&gt;. Click the &amp;lsquo;Save public key&amp;rsquo; and &amp;lsquo;Save private key&amp;rsquo; buttons to save these to the same location as your other keys (if you have any). On Windows, the .ssh folder of your home directory will be something like this: &lt;code&gt;C:\Users\\*username*\\.ssh&lt;/code&gt;. You can create this directory if it doesn&amp;rsquo;t exist. When saving the private key you will be optionally asked to enter a password for another layer of security if desired - it is also possible to hit &amp;lsquo;OK&amp;rsquo; and not use a password in combination with the SSH private key. Keep PuTTYgen open for now as you will need to copy the public key value into the authorized_keys files on the appropriate private server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/putty_gen.PNG&#34; alt=&#34;PuTTY Key Generator&#34; title=&#34;PuTTY Key Generator&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you save the public key with a .txt (or .pub) extension and the private key with a .ppk one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.servermom.org/wp-content/uploads/2014/06/public-key-save.jpg&#34;&gt;
&lt;img src=&#34;http://www.servermom.org/wp-content/uploads/2014/06/private-key-saved.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-3:f77569a6b4afc10750083404d55c7c58&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Open up Cygwin and log into the machine that you wish to configure with SSH keys. You&amp;rsquo;ll need the standard username/password credentials for the instance for now. In your home directory, issue the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p .ssh
$ chmod 700 .ssh
$ nano .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the generated public key in PuttyGen and paste it in the Nano editor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.servermom.org/wp-content/uploads/2014/06/copy-pub-key.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Save and exit Nano by hitting &lt;code&gt;ctrl+O&lt;/code&gt;, enter, then &lt;code&gt;ctrl+X&lt;/code&gt; on your keyboard. Then change its permission to 644 with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod 644 .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-4:f77569a6b4afc10750083404d55c7c58&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Ensure that PuTTY&amp;rsquo;s Pageant (downloaded in Step 1) is running (you should see a little icon for it in the tray at the bottom of your screen):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://niki.hammler.net/w/images/f/f6/Pageant.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Double-click this to see the current list of private keys loaded to Pageant. You can manually load them each time through this UI when your computer boots up, but the more efficient approach is to have them load on startup following &lt;a href=&#34;http://blog.shvetsov.com/2010/03/making-pageant-automatically-load-keys.html&#34; target=&#34;_blank&#34;&gt;these steps&lt;/a&gt;. Pageant can load one or more private keys when it starts up if you provide them on the Pageant command line. The simplest way to do this in Windows is to create a specially crafted shortcut inside the Startup folder (Start -&amp;gt; Programs -&amp;gt; Startup).&lt;/p&gt;

&lt;h2 id=&#34;step-5:f77569a6b4afc10750083404d55c7c58&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;The last step is to &lt;a href=&#34;https://github.com/cuviper/ssh-pageant&#34; target=&#34;_blank&#34;&gt;download this daemon&lt;/a&gt; that allows you to use your loaded SSH keys from PuTTY&amp;rsquo;s Pageant in Cygwin. By editing your &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.bash_profile&lt;/code&gt; - check where Cygwin is installed on your computer for these files) to add the following, this program will run whenever you start Cygwin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ssh-pageant
eval $(/usr/bin/ssh-pageant -r -a &amp;quot;/tmp/.ssh-pageant-$USERNAME&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Cygwin running now with the loaded private keys from Pageant, you will be able to make secure, automated SSH connections from this shell to remote environments or other services built on top of SSH, like SFTP file transfers or pushing to git repositories.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH With Git Bash and TortoiseGit for Windows</title>
      <link>http://andrewrgoss.com/2016/ssh-with-git-bash-and-tortoisegit-for-windows/</link>
      <pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate>
      <author>andrewrgoss@gmail.com (Andrew Goss)</author>
      <guid>http://andrewrgoss.com/2016/ssh-with-git-bash-and-tortoisegit-for-windows/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://git-scm.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/git_windows.png&#34; alt=&#34;Git for Windows&#34; title=&#34;Git for Windows&#34; /&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever written code of any kind for professional and personal purposes, you&amp;rsquo;ve likely come across the concept of Source Control Management (SCM). When I first became a developer, I used Subversion as my SCM tool but have since switched to the more popular &lt;a href=&#34;https://git-scm.com&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt;. I use git to commit the latest versions of code in both Linux and Windows environments, but I&amp;rsquo;m going to focus on Windows in this post as this is the operating system for my personal computer.&lt;/p&gt;

&lt;p&gt;Git itself is strictly a command-line tool and in setting up my Windows machine, I wanted the ability to make passwordless commits via bash commands or through my favorite git GUI tool, &lt;a href=&#34;https://git-scm.com&#34; target=&#34;_blank&#34;&gt;TortoiseGit&lt;/a&gt;. Why passwordless? It&amp;rsquo;s gets quite annoying having to enter your Github credentials every single time you push repository changes. Through the use of SSH keys, there is a secure way of doing this that allows Git Bash (or &lt;a href=&#34;https://www.cygwin.com&#34; target=&#34;_blank&#34;&gt;Cygwin&lt;/a&gt;) and TortoiseGit to play nice together. I didn&amp;rsquo;t find any good current documentation for this and had to mess around a bit to get the setup I now use, hence the reason for this post.&lt;/p&gt;

&lt;h2 id=&#34;step-1:ca600a9d3dfcf61b6d7740c7d2519dbe&#34;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Download the latest version of &lt;a href=&#34;https://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;Git for Windows&lt;/a&gt; and install it. I would recommend you use most of the default settings, including running Git from the Windows Command Prompt so you can use Cygwin as your command-line tool if you prefer it over Git Bash, which comes with this download.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/installing_git.png&#34; alt=&#34;Installing Git&#34; title=&#34;Installing Git&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2:ca600a9d3dfcf61b6d7740c7d2519dbe&#34;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Download the latest version of &lt;a href=&#34;https://tortoisegit.org&#34; target=&#34;_blank&#34;&gt;TortoiseGit&lt;/a&gt; and install it. There are no special steps to follow here, just keep hitting &amp;lsquo;next&amp;rsquo;.&lt;/p&gt;

&lt;h2 id=&#34;step-3:ca600a9d3dfcf61b6d7740c7d2519dbe&#34;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Generate an SSH key for your Github account following these &lt;a href=&#34;https://help.github.com/articles/generating-an-ssh-key&#34; target=&#34;_blank&#34;&gt;instructions&lt;/a&gt;. At the end, be sure to test your SSH connection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh -T git@github.com
# Attempts to ssh to GitHub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you did everything correctly here, two files should now exist in a .ssh folder of your home directory (for Windows this will be C:\Users\&lt;em&gt;username&lt;/em&gt;\.ssh). By the default they will be named id_rsa (the private SSH key) and id_rsa.pub (the public SSH key). If you have Microsoft Publisher installed on your computer, it will think the public key is a publisher file (because of the .pub extension). Use &amp;lsquo;open with&amp;rsquo; to view this key in a text editor tool like &lt;a href=&#34;https://notepad-plus-plus.org&#34; target=&#34;_blank&#34;&gt;Notepad++&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-4:ca600a9d3dfcf61b6d7740c7d2519dbe&#34;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;TortoiseGit uses a PuTTY private key file format, so you will need to generate a private key in this format using the private key you generated following the steps from Github. Search your programs and files for PuTTygen, which should have been installed with TortoiseGit. Open this program and go to Conversions &amp;gt; Import key.&lt;/p&gt;

&lt;p&gt;Browse to the private key file you generated via &lt;code&gt;ssh-keygen&lt;/code&gt; (see step 4) and import this into PuTTygen. Click the &amp;lsquo;Save private key&amp;rsquo; button after you have imported your private SSH key to save it in PuTTY private key file format (.ppk). You will want to save it to the same location as your other keys (the .ssh folder of your home directory, C:\Users\&lt;em&gt;username&lt;/em&gt;\.ssh).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/putty_gen.PNG&#34; alt=&#34;PuTTY Key Generator&#34; title=&#34;PuTTY Key Generator&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/ssh_keys.PNG&#34; alt=&#34;SSH Keys&#34; title=&#34;SSH Keys&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-5:ca600a9d3dfcf61b6d7740c7d2519dbe&#34;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;In your Github repository, select &amp;lsquo;Clone with SSH&amp;rsquo; and copy the URL path to the clipboard (make sure it starts with &lt;code&gt;git@github.com&lt;/code&gt;). Use TortoiseGit to to clone a copy of your Github repository to your local machine (right click in the directory, then select Git Clone&amp;hellip;). Paste the copied URL path into TortoiseGit. Check &amp;lsquo;Load Putty Key&amp;rsquo; and browse to the .ppk file you created in Step 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/tortoisegit_clone.png&#34; alt=&#34;TortoiseGit Clone&#34; title=&#34;TortoiseGit Clone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hit &amp;lsquo;OK&amp;rsquo; and that&amp;rsquo;s it! You now have a SSH repository on your Windows machine that you can push passwordless changes with using either the TortoiseGit GUI or the command line with Git Bash (or Cygwin). I tend to use TortoiseGit for one-off commits and automated deployment scripts through the command line for repositories I am frequently making changes to. Regardless of approach, it is nice to have TortoiseGit installed on your Windows machine to easily visually identify any uncommitted changes for a repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://andrewrgoss.com/img/post/tortoisegit_repo.png&#34; alt=&#34;TortoiseGit Repo&#34; title=&#34;TortoiseGit Repo&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;andgoss@MYCOMPUTER MINGW64 /C/Github_AG/mssql-library (master)
# Push source and build repos.
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>